name: Build OpenWrt for specific target and release

on:
  workflow_dispatch:
#  push:
#  schedule:
#    - cron: "0 */2 * * *"

env:
  REMOTE_REPOSITORY: regae/openwrt
  REMOTE_BRANCH: openwrt-23.05-chromium
  CONFIG_FILE: onhub.config
  NSS_STATUS_PATCH: 999-add-nss-load-to-status.patch
  QAM256_PATCH: 999-luci-support-256QAM.patch
  OVS_PATCH1: 0009-set-master-for-vport.patch
  RELEASE_PREFIX: chromium-nss-11.4
  NSS_PACKAGES_REPOSITORY: regae/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-11.4

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-22.04
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_nss_packages_repo_new_commits.outputs.new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_nss_packages_repo_new_commits.outputs.latest_commit_sha }}

    steps:
      - name: Check for new commits
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT

      - name: Check for new commits in NSS Packages Repository
        id: check_nss_packages_repo_new_commits
        run: |
          nss_packages_repo_latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits?sha=${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          nss_packages_repo_last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'NSS Packages Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$nss_packages_repo_latest_commit_sha" != "$nss_packages_repo_last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$nss_packages_repo_latest_commit_sha" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || needs.check_commits.outputs.nss_packages_repo_new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libncursesw5-dev libssl-dev \
            python3 python3-setuptools python3-distutils python3-dev python3-pyelftools \
            rsync swig unzip zlib1g-dev file wget libelf-dev subversion swig time xsltproc patch

      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"

      - name: Free space
        run: custom_repo/workflow-scripts/free_disk_space.sh

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Apply NSS Status patch
        run: |
          mv custom_repo/patches/${{ env.NSS_STATUS_PATCH }} feeds/luci/${{ env.NSS_STATUS_PATCH }}
          mv custom_repo/patches/${{ env.QAM256_PATCH }} feeds/luci/${{ env.QAM256_PATCH }}
          mv custom_repo/patches/openvswitch/${{ env.OVS_PATCH1 }} feeds/packages/net/openvswitch/patches/${{ env.OVS_PATCH1 }}
          cd feeds/luci
          git apply ${{ env.NSS_STATUS_PATCH }}
          patch -p1 < ${{ env.QAM256_PATCH }}

      - name: Configure firmware image
        run: |
          mv custom_repo/${{ env.CONFIG_FILE }} .config
          echo CONFIG_TARGET_DEVICE_ipq806x_chromium_DEVICE_tplink_onhub-usb=y >> .config
          patch -p1 < custom_repo/patches/usb-boot.patch
          make defconfig -j$(nproc)

      - name: Download package
        run: make download -j$(nproc)

      - name: Make toolchain
        id: compiletoolchain
#        continue-on-error: true
        run: make toolchain/install -j$(nproc)

      - name: If toolchain Error
        if: steps.compiletoolchain.outcome == 'failure'
        run: make toolchain/install -j1 V=s

      - name: Build the firmware image
#        continue-on-error: true
        run: |
          let make_process=$(nproc)+1
          make -j${make_process} || make V=sc -j${make_process}

      - name: Package output
        run: tar -cvf chromium-images.tar bin/targets/ipq806x/chromium

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chromium-images
          path: chromium-images.tar

  release:
    name: Create release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: chromium-images

      - name: Extract artifacts
        run: tar xf chromium-images.tar

      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: bin/targets/ipq806x/chromium/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: Chromium NSS-11.4 ${{ env.RELEASE_DATE }}
          body: |
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
            NSS Packages Commit: ${{ needs.check_commits.outputs.nss_packages_repo_latest_commit_sha }}

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
